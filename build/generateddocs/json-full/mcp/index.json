

{
  "itemIdentifier": "mcp.mcp",
  "name": "MCP",
  "highlighted": true,
  "title": "Model Context Protocol",
  "description": "Schema refactored to use a JSON-RPC buildingblock",
  "status": "stable",
  "version": "1.0.0",
  "itemClass": "schema",
  "dependsOn": [
    "mcp.json-rpc"
  ],
  "sources": [
    {
      "title": "Model Context Protocol",
      "link": "https://modelcontextprotocol.io/specification/2025-06-18"
    },
    {
      "title": "Model Context Protocol schema",
      "link": "https://raw.githubusercontent.com/modelcontextprotocol/modelcontextprotocol/refs/heads/main/schema/2025-06-18/schema.json"
    }
  ],
  "rules": [],
  "dateTimeAddition": "2025-06-12T00:00:00Z",
  "dateOfLastChange": "2025-09-29",
  "shaclShapes": {},
  "ldContext": "https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld",
  "schema": {
    "application/yaml": "https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/schema.yaml",
    "application/json": "https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/schema.json"
  },
  "sourceSchema": "https://ogcincubator.github.io/modelcontextprotocol/_sources/mcp/schema.json",
  "sourceLdContext": "https://ogcincubator.github.io/modelcontextprotocol/_sources/mcp/context.jsonld",
  "sourceFiles": "https://ogcincubator.github.io/modelcontextprotocol/_sources/mcp/",
  "rdfData": [],
  "validationPassed": true,
  "testOutputs": "https://github.com/ogcincubator/modelcontextprotocol/blob/master/build/tests/mcp/",
  "examples": [
    {
      "title": "initialize",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/InitializeRequest",
          "ref": "examples/mcp-methods/initialize.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"tools\": {},\n      \"resources\": {},\n      \"prompts\": {},\n      \"logging\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"example-client\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_1_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"initialize\",\n  \"params\": {\n    \"protocolVersion\": \"2024-11-05\",\n    \"capabilities\": {\n      \"tools\": {},\n      \"resources\": {},\n      \"prompts\": {},\n      \"logging\": {}\n    },\n    \"clientInfo\": {\n      \"name\": \"example-client\",\n      \"version\": \"1.0.0\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_1_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/1> ;\n    jrpc:hasMethod \"initialize\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasCapabilities [ mcp:hasPromptsCapability \"{}\"^^rdf:JSON ;\n                    mcp:hasResourcesCapability \"{}\"^^rdf:JSON ;\n                    mcp:hasToolsCapability \"{}\"^^rdf:JSON ] ;\n            mcp:hasClientInfo [ mcp:hasName \"example-client\"^^xsd:string ;\n                    mcp:hasVersion \"1.0.0\"^^xsd:string ] ;\n            mcp:hasProtocolVersion \"2024-11-05\"^^xsd:string ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_1_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/initialized",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/InitializedNotification",
          "ref": "examples/mcp-methods/initialized.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_2_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/initialized\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_2_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/initialized\"^^xsd:string ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_2_1.ttl"
        }
      ]
    },
    {
      "title": "tools/list",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ListToolsRequest",
          "ref": "examples/mcp-methods/tools_list.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"2\",\n  \"method\": \"tools/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_3_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"2\",\n  \"method\": \"tools/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_3_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/2> ;\n    jrpc:hasMethod \"tools/list\"^^xsd:string ;\n    jrpc:hasParameters [ ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_3_1.ttl"
        }
      ]
    },
    {
      "title": "tools/call",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/CallToolRequest",
          "ref": "examples/mcp-methods/tools_call.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"3\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"San Francisco\",\n      \"units\": \"celsius\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_4_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"3\",\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_weather\",\n    \"arguments\": {\n      \"location\": \"San Francisco\",\n      \"units\": \"celsius\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_4_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/3> ;\n    jrpc:hasMethod \"tools/call\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasArguments \"{\\\"location\\\":\\\"San Francisco\\\",\\\"units\\\":\\\"celsius\\\"}\"^^rdf:JSON ;\n            mcp:hasName \"get_weather\"^^xsd:string ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_4_1.ttl"
        }
      ]
    },
    {
      "title": "resources/list",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ListResourcesRequest",
          "ref": "examples/mcp-methods/resources_list.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"4\",\n  \"method\": \"resources/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_5_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"4\",\n  \"method\": \"resources/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_5_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/4> ;\n    jrpc:hasMethod \"resources/list\"^^xsd:string ;\n    jrpc:hasParameters [ ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_5_1.ttl"
        }
      ]
    },
    {
      "title": "resources/read",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ReadResourceRequest",
          "ref": "examples/mcp-methods/resources_read.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"5\",\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///path/to/document.txt\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_6_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"5\",\n  \"method\": \"resources/read\",\n  \"params\": {\n    \"uri\": \"file:///path/to/document.txt\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_6_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/5> ;\n    jrpc:hasMethod \"resources/read\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasURI \"file:///path/to/document.txt\"^^xsd:anyURI ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_6_1.ttl"
        }
      ]
    },
    {
      "title": "resources/subscribe",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/SubscribeRequest",
          "ref": "examples/mcp-methods/resources_subscribe.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"6\",\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///path/to/watched/directory\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_7_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"6\",\n  \"method\": \"resources/subscribe\",\n  \"params\": {\n    \"uri\": \"file:///path/to/watched/directory\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_7_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/6> ;\n    jrpc:hasMethod \"resources/subscribe\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasURI \"file:///path/to/watched/directory\"^^xsd:anyURI ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_7_1.ttl"
        }
      ]
    },
    {
      "title": "resources/unsubscribe",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/UnsubscribeRequest",
          "ref": "examples/mcp-methods/resources_unsubscribe.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"7\",\n  \"method\": \"resources/unsubscribe\",\n  \"params\": {\n    \"uri\": \"file:///path/to/watched/directory\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_8_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"7\",\n  \"method\": \"resources/unsubscribe\",\n  \"params\": {\n    \"uri\": \"file:///path/to/watched/directory\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_8_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/7> ;\n    jrpc:hasMethod \"resources/unsubscribe\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasURI \"file:///path/to/watched/directory\"^^xsd:anyURI ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_8_1.ttl"
        }
      ]
    },
    {
      "title": "prompts/list",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ListPromptsRequest",
          "ref": "examples/mcp-methods/prompts_list.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"8\",\n  \"method\": \"prompts/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_9_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"8\",\n  \"method\": \"prompts/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_9_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/8> ;\n    jrpc:hasMethod \"prompts/list\"^^xsd:string ;\n    jrpc:hasParameters [ ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_9_1.ttl"
        }
      ]
    },
    {
      "title": "prompts/get",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/GetPromptRequest",
          "ref": "examples/mcp-methods/prompts_get.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"9\",\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"language\": \"python\",\n      \"complexity\": \"high\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_10_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"9\",\n  \"method\": \"prompts/get\",\n  \"params\": {\n    \"name\": \"code_review\",\n    \"arguments\": {\n      \"language\": \"python\",\n      \"complexity\": \"high\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_10_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/9> ;\n    jrpc:hasMethod \"prompts/get\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasArguments \"{\\\"complexity\\\":\\\"high\\\",\\\"language\\\":\\\"python\\\"}\"^^rdf:JSON ;\n            mcp:hasName \"code_review\"^^xsd:string ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_10_1.ttl"
        }
      ]
    },
    {
      "title": "logging/setLevel",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/SetLevelRequest",
          "ref": "examples/mcp-methods/logging_setLevel.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"10\",\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_11_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"10\",\n  \"method\": \"logging/setLevel\",\n  \"params\": {\n    \"level\": \"info\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_11_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/10> ;\n    jrpc:hasMethod \"logging/setLevel\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasLevel \"info\"^^mcp:LoggingLevel ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_11_1.ttl"
        }
      ]
    },
    {
      "title": "completion/complete",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/CompleteRequest",
          "ref": "examples/mcp-methods/completion_complete.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"11\",\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/resource\",\n      \"uri\": \"file:///path/to/file.py\"\n    },\n    \"argument\": {\n      \"name\": \"query\",\n      \"value\": \"def calculate_\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_12_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"11\",\n  \"method\": \"completion/complete\",\n  \"params\": {\n    \"ref\": {\n      \"type\": \"ref/resource\",\n      \"uri\": \"file:///path/to/file.py\"\n    },\n    \"argument\": {\n      \"name\": \"query\",\n      \"value\": \"def calculate_\"\n    }\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_12_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/11> ;\n    jrpc:hasMethod \"completion/complete\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasArgument \"{\\\"name\\\":\\\"query\\\",\\\"value\\\":\\\"def calculate_\\\"}\"^^rdf:JSON ;\n            mcp:hasReference [ mcp:hasContentType \"ref/resource\"^^xsd:string ;\n                    mcp:hasURI \"file:///path/to/file.py\"^^xsd:anyURI ] ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_12_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/cancelled",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/CancelledNotification",
          "ref": "examples/mcp-methods/notifications_cancelled.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"3\",\n    \"reason\": \"User requested cancellation\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_13_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/cancelled\",\n  \"params\": {\n    \"requestId\": \"3\",\n    \"reason\": \"User requested cancellation\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_13_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/cancelled\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasReason \"User requested cancellation\"^^xsd:string ;\n            mcp:hasRequestId \"3\"^^mcp:RequestId ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_13_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/progress",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ProgressNotification",
          "ref": "examples/mcp-methods/notifications_progress.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"upload_123\",\n    \"progress\": 75,\n    \"total\": 100\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_14_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/progress\",\n  \"params\": {\n    \"progressToken\": \"upload_123\",\n    \"progress\": 75,\n    \"total\": 100\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_14_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/progress\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasProgress 75.0 ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_14_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/resources/updated",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ResourceUpdatedNotification",
          "ref": "examples/mcp-methods/notifications_resources_updated.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///path/to/document.txt\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_15_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/updated\",\n  \"params\": {\n    \"uri\": \"file:///path/to/document.txt\"\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_15_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/resources/updated\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:hasURI \"file:///path/to/document.txt\"^^xsd:anyURI ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_15_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/resources/list_changed",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ResourceListChangedNotification",
          "ref": "examples/mcp-methods/notifications_resources_list_changed.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_16_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/resources/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_16_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/resources/list_changed\"^^xsd:string ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_16_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/tools/list_changed",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ToolListChangedNotification",
          "ref": "examples/mcp-methods/notifications_tools_list_changed.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_17_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/tools/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_17_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/tools/list_changed\"^^xsd:string ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_17_1.ttl"
        }
      ]
    },
    {
      "title": "notifications/prompts/list_changed",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/PromptListChangedNotification",
          "ref": "examples/mcp-methods/notifications_prompts_list_changed.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_18_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"notifications/prompts/list_changed\"\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_18_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasMethod \"notifications/prompts/list_changed\"^^xsd:string ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_18_1.ttl"
        }
      ]
    },
    {
      "title": "sampling/createMessage",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/CreateMessageRequest",
          "ref": "examples/mcp-methods/sampling_createMessage.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"12\",\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What's the weather like today?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"costPriority\": 0.5,\n      \"speedPriority\": 0.8,\n      \"intelligencePriority\": 0.9\n    },\n    \"systemPrompt\": \"You are a helpful weather assistant.\",\n    \"includeContext\": \"thisServer\",\n    \"temperature\": 0.7,\n    \"maxTokens\": 1000\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_19_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"12\",\n  \"method\": \"sampling/createMessage\",\n  \"params\": {\n    \"messages\": [\n      {\n        \"role\": \"user\",\n        \"content\": {\n          \"type\": \"text\",\n          \"text\": \"What's the weather like today?\"\n        }\n      }\n    ],\n    \"modelPreferences\": {\n      \"hints\": [\n        {\n          \"name\": \"claude-3-sonnet\"\n        }\n      ],\n      \"costPriority\": 0.5,\n      \"speedPriority\": 0.8,\n      \"intelligencePriority\": 0.9\n    },\n    \"systemPrompt\": \"You are a helpful weather assistant.\",\n    \"includeContext\": \"thisServer\",\n    \"temperature\": 0.7,\n    \"maxTokens\": 1000\n  }\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_19_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix mcp: <http://modelcontextprotocol.io/ontology#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/12> ;\n    jrpc:hasMethod \"sampling/createMessage\"^^xsd:string ;\n    jrpc:hasParameters [ mcp:containsMessage ( [ mcp:hasContent ( [ mcp:hasContentType \"text\"^^xsd:string ;\n                                    mcp:hasText \"What's the weather like today?\"^^xsd:string ] ) ;\n                        mcp:hasRole \"user\"^^mcp:Role ] ) ;\n            mcp:hasIncludeContext \"thisServer\"^^xsd:string ;\n            mcp:hasMaxTokens 1000 ;\n            mcp:hasModelPreferences [ mcp:hasCostPriority 0.5 ;\n                    mcp:hasHints ( [ mcp:hasName \"claude-3-sonnet\"^^xsd:string ] ) ;\n                    mcp:hasIntelligencePriority 0.9 ;\n                    mcp:hasSpeedPriority 0.8 ] ;\n            mcp:hasSystemPrompt \"You are a helpful weather assistant.\"^^xsd:string ;\n            mcp:hasTemperature 0.7 ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_19_1.ttl"
        }
      ]
    },
    {
      "title": "roots/list",
      "base-uri": "http://example.com/activities/",
      "snippets": [
        {
          "language": "json",
          "schema-ref": "#definitions/ListRootsRequest",
          "ref": "examples/mcp-methods/roots_list.json",
          "code": "{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"13\",\n  \"method\": \"roots/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_20_1.json"
        },
        {
          "language": "jsonld",
          "code": "{\n  \"@context\": \"https://ogcincubator.github.io/modelcontextprotocol/build/annotated/mcp/context.jsonld\",\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"13\",\n  \"method\": \"roots/list\",\n  \"params\": {}\n}",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_20_1.jsonld"
        },
        {
          "language": "ttl",
          "code": "@prefix jrpc: <http://json-rpc.org/ontology#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n\n[] jrpc:hasId <http://example.com/activities/13> ;\n    jrpc:hasMethod \"roots/list\"^^xsd:string ;\n    jrpc:hasParameters [ ] ;\n    jrpc:version \"2.0\"^^xsd:string .\n\n",
          "url": "https://ogcincubator.github.io/modelcontextprotocol/build/tests/mcp/example_20_1.ttl"
        }
      ]
    }
  ],
  "annotatedSchema": "$schema: http://json-schema.org/draft-07/schema#\ndefinitions:\n  ProgressToken:\n    $anchor: ProgressToken\n    description: A progress token, used to associate progress notifications with the\n      original request.\n    type:\n    - string\n  Annotations:\n    description: Optional annotations for the client. The client can use annotations\n      to inform how objects are used or displayed\n    properties:\n      audience:\n        description: 'Describes who the intended customer of this object or data is.\n\n\n          It can include multiple entries to indicate content useful for multiple\n          audiences (e.g., `[\"user\", \"assistant\"]`).'\n        items:\n          $ref: '#/definitions/Role'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAudience\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Role\n        x-jsonld-container: '@list'\n      lastModified:\n        description: 'The moment the resource was last modified, as an ISO 8601 formatted\n          string.\n\n\n          Should be an ISO 8601 formatted string (e.g., \"2025-01-12T15:00:58Z\").\n\n\n          Examples: last activity timestamp in an open file, timestamp when the resource\n\n          was attached, etc.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLastModified\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#dateTime\n      priority:\n        description: 'Describes how important this data is for operating the server.\n\n\n          A value of 1 means \"most important,\" and indicates that the data is\n\n          effectively required, while 0 means \"least important,\" and indicates that\n\n          the data is entirely optional.'\n        maximum: 1\n        minimum: 0\n        type: number\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasPriority\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n    type: object\n  AudioContent:\n    description: Audio provided to or from an LLM.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      data:\n        description: The base64-encoded audio data.\n        format: byte\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasData\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#base64Binary\n      mimeType:\n        description: The MIME type of the audio. Different providers may support different\n          audio types.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: audio\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - data\n    - mimeType\n    - type\n    type: object\n  BaseMetadata:\n    description: Base interface for metadata with name (identifier) and title (display\n      name) properties.\n    properties:\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    type: object\n  BlobResourceContents:\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      blob:\n        description: A base64-encoded string representing the binary data of the item.\n        format: byte\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasBlob\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#base64Binary\n      mimeType:\n        description: The MIME type of this resource, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI of this resource.\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - blob\n    - uri\n    type: object\n  BooleanSchema:\n    properties:\n      default:\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDefault\n      description:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: boolean\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - type\n    type: object\n  CallToolRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Used by the client to invoke a tool provided by the server.\n    properties:\n      method:\n        const: tools/call\n        type: string\n      params:\n        properties:\n          arguments:\n            additionalProperties: {}\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasArguments\n            x-jsonld-type: '@json'\n          name:\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - name\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  CallToolResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a tool call.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      content:\n        description: A list of content objects that represent the unstructured result\n          of the tool call.\n        items:\n          $ref: '#/definitions/ContentBlock'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContent\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n      isError:\n        description: 'Whether the tool call ended in an error.\n\n\n          If not set, this is assumed to be false (the call was successful).\n\n\n          Any errors that originate from the tool SHOULD be reported inside the result\n\n          object, with `isError` set to true, _not_ as an MCP protocol-level error\n\n          response. Otherwise, the LLM would not be able to see that an error occurred\n\n          and self-correct.\n\n\n          However, any errors in _finding_ the tool, an error indicating that the\n\n          server does not support tool calls, or any other exceptional conditions,\n\n          should be reported as an MCP error response.'\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isError\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      structuredContent:\n        additionalProperties: {}\n        description: An optional JSON object that represents the structured result\n          of the tool call.\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasStructuredContent\n        x-jsonld-type: '@json'\n    required:\n    - content\n    type: object\n  CancelledNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: 'This notification can be sent by either side to indicate that it\n      is cancelling a previously-issued request.\n\n\n      The request SHOULD still be in-flight, but due to communication latency, it\n      is always possible that this notification MAY arrive after the request has already\n      finished.\n\n\n      This notification indicates that the result will be unused, so any associated\n      processing SHOULD cease.\n\n\n      A client MUST NOT attempt to cancel its `initialize` request.'\n    properties:\n      method:\n        const: notifications/cancelled\n        type: string\n      params:\n        properties:\n          reason:\n            description: An optional string describing the reason for the cancellation.\n              This MAY be logged or presented to the user.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasReason\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n          requestId:\n            $ref: '#/definitions/RequestId'\n            description: 'The ID of the request to cancel.\n\n\n              This MUST correspond to the ID of a request previously issued in the\n              same direction.'\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRequestId\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#RequestId\n        required:\n        - requestId\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  ClientCapabilities:\n    description: 'Capabilities a client may support. Known capabilities are defined\n      here, in this schema, but this is not a closed set: any client can define its\n      own, additional capabilities.'\n    properties:\n      elicitation:\n        additionalProperties: true\n        description: Present if the client supports elicitation from the server.\n        properties: {}\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasElicitationCapability\n        x-jsonld-type: '@json'\n      experimental:\n        additionalProperties:\n          additionalProperties: true\n          properties: {}\n          type: object\n        description: Experimental, non-standard capabilities that the client supports.\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasExperimentalCapabilities\n        x-jsonld-type: '@json'\n      roots:\n        description: Present if the client supports listing roots.\n        properties:\n          listChanged:\n            description: Whether the client supports notifications for changes to\n              the roots list.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#supportsListChanged\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#containsRoot\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Root\n        x-jsonld-container: '@list'\n      sampling:\n        additionalProperties: true\n        description: Present if the client supports sampling from an LLM.\n        properties: {}\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasSamplingCapability\n        x-jsonld-type: '@json'\n    type: object\n  ClientNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    anyOf:\n    - $ref: '#/definitions/CancelledNotification'\n    - $ref: '#/definitions/InitializedNotification'\n    - $ref: '#/definitions/ProgressNotification'\n    - $ref: '#/definitions/RootsListChangedNotification'\n  ClientRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    anyOf:\n    - $ref: '#/definitions/InitializeRequest'\n    - $ref: '#/definitions/PingRequest'\n    - $ref: '#/definitions/ListResourcesRequest'\n    - $ref: '#/definitions/ListResourceTemplatesRequest'\n    - $ref: '#/definitions/ReadResourceRequest'\n    - $ref: '#/definitions/SubscribeRequest'\n    - $ref: '#/definitions/UnsubscribeRequest'\n    - $ref: '#/definitions/ListPromptsRequest'\n    - $ref: '#/definitions/GetPromptRequest'\n    - $ref: '#/definitions/ListToolsRequest'\n    - $ref: '#/definitions/CallToolRequest'\n    - $ref: '#/definitions/SetLevelRequest'\n    - $ref: '#/definitions/CompleteRequest'\n  ClientResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    anyOf:\n    - $ref: '#/definitions/Result'\n    - $ref: '#/definitions/CreateMessageResult'\n    - $ref: '#/definitions/ListRootsResult'\n    - $ref: '#/definitions/ElicitResult'\n  CompleteRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: A request from the client to the server, to ask for completion options.\n    properties:\n      method:\n        const: completion/complete\n        type: string\n      params:\n        properties:\n          argument:\n            description: The argument's information\n            properties:\n              name:\n                description: The name of the argument\n                type: string\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n                x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n              value:\n                description: The value of the argument to use for completion matching.\n                type: string\n            required:\n            - name\n            - value\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasArgument\n            x-jsonld-type: '@json'\n          context:\n            description: Additional, optional context for completions\n            properties:\n              arguments:\n                additionalProperties:\n                  type: string\n                description: Previously-resolved variables in a URI template or prompt.\n                type: object\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasArguments\n                x-jsonld-type: '@json'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContext\n            x-jsonld-type: '@json'\n          ref:\n            anyOf:\n            - $ref: '#/definitions/PromptReference'\n            - $ref: '#/definitions/ResourceTemplateReference'\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasReference\n            x-jsonld-type: '@id'\n        required:\n        - argument\n        - ref\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  CompleteResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a completion/complete request\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      completion:\n        properties:\n          hasMore:\n            description: Indicates whether there are additional completion options\n              beyond those provided in the current response, even if the exact total\n              is unknown.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMore\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n          total:\n            description: The total number of completion options available. This can\n              exceed the number of values actually sent in the response.\n            type: integer\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTotal\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n          values:\n            description: An array of completion values. Must not exceed 100 items.\n            items:\n              type: string\n            type: array\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasValues\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n            x-jsonld-container: '@list'\n        required:\n        - values\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCompletion\n        x-jsonld-type: '@json'\n    required:\n    - completion\n    type: object\n  ContentBlock:\n    anyOf:\n    - $ref: '#/definitions/TextContent'\n    - $ref: '#/definitions/ImageContent'\n    - $ref: '#/definitions/AudioContent'\n    - $ref: '#/definitions/ResourceLink'\n    - $ref: '#/definitions/EmbeddedResource'\n  CreateMessageRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: A request from the server to sample an LLM via the client. The client\n      has full discretion over which model to select. The client should also inform\n      the user before beginning sampling, to allow them to inspect the request (human\n      in the loop) and decide whether to approve it.\n    properties:\n      method:\n        const: sampling/createMessage\n        type: string\n      params:\n        properties:\n          includeContext:\n            description: A request to include context from one or more MCP servers\n              (including the caller), to be attached to the prompt. The client MAY\n              ignore this request.\n            enum:\n            - allServers\n            - none\n            - thisServer\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasIncludeContext\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n          maxTokens:\n            description: The maximum number of tokens to sample, as requested by the\n              server. The client MAY choose to sample fewer tokens than requested.\n            type: integer\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMaxTokens\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n          messages:\n            items:\n              $ref: '#/definitions/SamplingMessage'\n            type: array\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#containsMessage\n            x-jsonld-type: '@id'\n            x-jsonld-container: '@list'\n          metadata:\n            additionalProperties: true\n            description: Optional metadata to pass through to the LLM provider. The\n              format of this metadata is provider-specific.\n            properties: {}\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n          modelPreferences:\n            $ref: '#/definitions/ModelPreferences'\n            description: The server's preferences for which model to select. The client\n              MAY ignore these preferences.\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasModelPreferences\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#ModelPreferences\n          stopSequences:\n            items:\n              type: string\n            type: array\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasStopSequences\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n            x-jsonld-container: '@list'\n          systemPrompt:\n            description: An optional system prompt the server wants to use for sampling.\n              The client MAY modify or omit this prompt.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasSystemPrompt\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n          temperature:\n            type: number\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTemperature\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n        required:\n        - maxTokens\n        - messages\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  CreateMessageResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The client's response to a sampling/create_message request from the\n      server. The client should inform the user before returning the sampled message,\n      to allow them to inspect the response (human in the loop) and decide whether\n      to allow the server to see it.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      content:\n        anyOf:\n        - $ref: '#/definitions/TextContent'\n        - $ref: '#/definitions/ImageContent'\n        - $ref: '#/definitions/AudioContent'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContent\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n      model:\n        description: The name of the model that generated the message.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasModel\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      role:\n        $ref: '#/definitions/Role'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRole\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Role\n      stopReason:\n        description: The reason why sampling stopped, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasStopReason\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - content\n    - model\n    - role\n    type: object\n  Cursor:\n    description: An opaque token used to represent a cursor for pagination.\n    type: string\n  ElicitRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: A request from the server to elicit additional information from the\n      user via the client.\n    properties:\n      method:\n        const: elicitation/create\n        type: string\n      params:\n        properties:\n          message:\n            description: The message to present to the user.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMessage\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n          requestedSchema:\n            description: 'A restricted subset of JSON Schema.\n\n              Only top-level properties are allowed, without nesting.'\n            properties:\n              properties:\n                additionalProperties:\n                  $ref: '#/definitions/PrimitiveSchemaDefinition'\n                type: object\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProperties\n                x-jsonld-type: '@json'\n              required:\n                items:\n                  type: string\n                type: array\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#isRequired\n                x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n              type:\n                const: object\n                type: string\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n                x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n            required:\n            - properties\n            - type\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRequestedSchema\n            x-jsonld-type: '@json'\n        required:\n        - message\n        - requestedSchema\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  ElicitResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The client's response to an elicitation request.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      action:\n        description: 'The user action in response to the elicitation.\n\n          - \"accept\": User submitted the form/confirmed the action\n\n          - \"decline\": User explicitly declined the action\n\n          - \"cancel\": User dismissed without making an explicit choice'\n        enum:\n        - accept\n        - cancel\n        - decline\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAction\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      content:\n        additionalProperties:\n          type:\n          - string\n          - integer\n          - boolean\n        description: 'The submitted form data, only present when action is \"accept\".\n\n          Contains values matching the requested schema.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContent\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n    required:\n    - action\n    type: object\n  EmbeddedResource:\n    description: 'The contents of a resource, embedded into a prompt or tool call\n      result.\n\n\n      It is up to the client how best to render embedded resources for the benefit\n\n      of the LLM and/or the user.'\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      resource:\n        anyOf:\n        - $ref: '#/definitions/TextResourceContents'\n        - $ref: '#/definitions/BlobResourceContents'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#embedsResource\n        x-jsonld-type: '@id'\n      type:\n        const: resource\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - resource\n    - type\n    type: object\n  EmptyResult:\n    $ref: '#/definitions/Result'\n  EnumSchema:\n    properties:\n      description:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      enum:\n        items:\n          type: string\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasEnumValues\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        x-jsonld-container: '@list'\n      enumNames:\n        items:\n          type: string\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasEnumNames\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        x-jsonld-container: '@list'\n      title:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: string\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - enum\n    - type\n    type: object\n  GetPromptRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Used by the client to get a prompt provided by the server.\n    properties:\n      method:\n        const: prompts/get\n        type: string\n      params:\n        properties:\n          arguments:\n            additionalProperties:\n              type: string\n            description: Arguments to use for templating the prompt.\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasArguments\n            x-jsonld-type: '@json'\n          name:\n            description: The name of the prompt or prompt template.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - name\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  GetPromptResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a prompts/get request from the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      description:\n        description: An optional description for the prompt.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      messages:\n        items:\n          $ref: '#/definitions/PromptMessage'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#containsMessage\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n    required:\n    - messages\n    type: object\n  ImageContent:\n    description: An image provided to or from an LLM.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      data:\n        description: The base64-encoded image data.\n        format: byte\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasData\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#base64Binary\n      mimeType:\n        description: The MIME type of the image. Different providers may support different\n          image types.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: image\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - data\n    - mimeType\n    - type\n    type: object\n  Implementation:\n    description: Describes the name and version of an MCP implementation, with an\n      optional title for UI representation.\n    properties:\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      version:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasVersion\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    - version\n    type: object\n  InitializeRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: This request is sent from the client to the server when it first\n      connects, asking it to begin initialization.\n    properties:\n      method:\n        const: initialize\n        type: string\n      params:\n        properties:\n          capabilities:\n            $ref: '#/definitions/ClientCapabilities'\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCapabilities\n            x-jsonld-type: '@id'\n          clientInfo:\n            $ref: '#/definitions/Implementation'\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasClientInfo\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Implementation\n          protocolVersion:\n            description: The latest version of the Model Context Protocol that the\n              client supports. The client MAY decide to support older versions as\n              well.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProtocolVersion\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - capabilities\n        - clientInfo\n        - protocolVersion\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  InitializeResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: After receiving an initialize request from the client, the server\n      sends this response.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      capabilities:\n        $ref: '#/definitions/ServerCapabilities'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCapabilities\n        x-jsonld-type: '@id'\n      instructions:\n        description: 'Instructions describing how to use the server and its features.\n\n\n          This can be used by clients to improve the LLM''s understanding of available\n          tools, resources, etc. It can be thought of like a \"hint\" to the model.\n          For example, this information MAY be added to the system prompt.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasInstructions\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      protocolVersion:\n        description: The version of the Model Context Protocol that the server wants\n          to use. This may not match the version that the client requested. If the\n          client cannot support this version, it MUST disconnect.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProtocolVersion\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      serverInfo:\n        $ref: '#/definitions/Implementation'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasServerInfo\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Implementation\n    required:\n    - capabilities\n    - protocolVersion\n    - serverInfo\n    type: object\n  InitializedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: This notification is sent from the client to the server after initialization\n      has finished.\n    properties:\n      method:\n        const: notifications/initialized\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  JSONRPCMessage:\n    anyOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: Refers to any valid JSON-RPC object that can be decoded off the wire,\n      or encoded to be sent.\n  ListPromptsRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request a list of prompts and prompt templates\n      the server has.\n    properties:\n      method:\n        const: prompts/list\n        type: string\n      params:\n        properties:\n          cursor:\n            description: 'An opaque token representing the current pagination position.\n\n              If provided, the server should return results starting after this cursor.'\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCursor\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ListPromptsResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a prompts/list request from the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      nextCursor:\n        description: 'An opaque token representing the pagination position after the\n          last returned result.\n\n          If present, there may be more results available.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasNextCursor\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n      prompts:\n        items:\n          $ref: '#/definitions/Prompt'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasPromptsCapability\n        x-jsonld-type: '@json'\n    required:\n    - prompts\n    type: object\n  ListResourceTemplatesRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request a list of resource templates the\n      server has.\n    properties:\n      method:\n        const: resources/templates/list\n        type: string\n      params:\n        properties:\n          cursor:\n            description: 'An opaque token representing the current pagination position.\n\n              If provided, the server should return results starting after this cursor.'\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCursor\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ListResourceTemplatesResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a resources/templates/list request from\n      the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      nextCursor:\n        description: 'An opaque token representing the pagination position after the\n          last returned result.\n\n          If present, there may be more results available.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasNextCursor\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n      resourceTemplates:\n        items:\n          $ref: '#/definitions/ResourceTemplate'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#containsResourceTemplate\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n    required:\n    - resourceTemplates\n    type: object\n  ListResourcesRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request a list of resources the server has.\n    properties:\n      method:\n        const: resources/list\n        type: string\n      params:\n        properties:\n          cursor:\n            description: 'An opaque token representing the current pagination position.\n\n              If provided, the server should return results starting after this cursor.'\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCursor\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ListResourcesResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a resources/list request from the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      nextCursor:\n        description: 'An opaque token representing the pagination position after the\n          last returned result.\n\n          If present, there may be more results available.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasNextCursor\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n      resources:\n        items:\n          $ref: '#/definitions/Resource'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasResourcesCapability\n        x-jsonld-type: '@json'\n    required:\n    - resources\n    type: object\n  ListRootsRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: 'Sent from the server to request a list of root URIs from the client.\n      Roots allow\n\n      servers to ask for specific directories or files to operate on. A common example\n\n      for roots is providing a set of repositories or directories a server should\n      operate\n\n      on.\n\n\n      This request is typically used when the server needs to understand the file\n      system\n\n      structure or access specific locations that the client has permission to read\n      from.'\n    properties:\n      method:\n        const: roots/list\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            properties:\n              progressToken:\n                $ref: '#/definitions/ProgressToken'\n                description: If specified, the caller is requesting out-of-band progress\n                  notifications for this request (as represented by notifications/progress).\n                  The value of this parameter is an opaque token that will be attached\n                  to any subsequent notifications. The receiver is not obligated to\n                  provide these notifications.\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgressToken\n                x-jsonld-type: http://modelcontextprotocol.io/ontology#ProgressToken\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ListRootsResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: 'The client''s response to a roots/list request from the server.\n\n      This result contains an array of Root objects, each representing a root directory\n\n      or file that the server can operate on.'\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      roots:\n        items:\n          $ref: '#/definitions/Root'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#containsRoot\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Root\n        x-jsonld-container: '@list'\n    required:\n    - roots\n    type: object\n  ListToolsRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request a list of tools the server has.\n    properties:\n      method:\n        const: tools/list\n        type: string\n      params:\n        properties:\n          cursor:\n            description: 'An opaque token representing the current pagination position.\n\n              If provided, the server should return results starting after this cursor.'\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCursor\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ListToolsResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a tools/list request from the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      nextCursor:\n        description: 'An opaque token representing the pagination position after the\n          last returned result.\n\n          If present, there may be more results available.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasNextCursor\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n      tools:\n        items:\n          $ref: '#/definitions/Tool'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasToolsCapability\n        x-jsonld-type: '@json'\n    required:\n    - tools\n    type: object\n  LoggingLevel:\n    description: 'The severity of a log message.\n\n\n      These map to syslog message severities, as specified in RFC-5424:\n\n      https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1'\n    enum:\n    - alert\n    - critical\n    - debug\n    - emergency\n    - error\n    - info\n    - notice\n    - warning\n    type: string\n  LoggingMessageNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: Notification of a log message passed from server to client. If no\n      logging/setLevel request has been sent from the client, the server MAY decide\n      which messages to send automatically.\n    properties:\n      method:\n        const: notifications/message\n        type: string\n      params:\n        properties:\n          data:\n            description: The data to be logged, such as a string message or an object.\n              Any JSON serializable type is allowed here.\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasData\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#base64Binary\n          level:\n            $ref: '#/definitions/LoggingLevel'\n            description: The severity of this log message.\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLevel\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#LoggingLevel\n          logger:\n            description: An optional name of the logger issuing this message.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLogger\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - data\n        - level\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  ModelHint:\n    description: 'Hints to use for model selection.\n\n\n      Keys not declared here are currently left unspecified by the spec and are up\n\n      to the client to interpret.'\n    properties:\n      name:\n        description: \"A hint for a model name.\\n\\nThe client SHOULD treat this as\n          a substring of a model name; for example:\\n - `claude-3-5-sonnet` should\n          match `claude-3-5-sonnet-20241022`\\n - `sonnet` should match `claude-3-5-sonnet-20241022`,\n          `claude-3-sonnet-20240229`, etc.\\n - `claude` should match any Claude model\\n\\nThe\n          client MAY also map the string to a different provider's model name or a\n          different model family, as long as it fills a similar niche; for example:\\n\n          - `gemini-1.5-flash` could match `claude-3-haiku-20240307`\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    type: object\n  ModelPreferences:\n    description: \"The server's preferences for model selection, requested of the client\n      during sampling.\\n\\nBecause LLMs can vary along multiple dimensions, choosing\n      the \\\"best\\\" model is\\nrarely straightforward.  Different models excel in different\n      areas\\u2014some are\\nfaster but less capable, others are more capable but more\n      expensive, and so\\non. This interface allows servers to express their priorities\n      across multiple\\ndimensions to help clients make an appropriate selection for\n      their use case.\\n\\nThese preferences are always advisory. The client MAY ignore\n      them. It is also\\nup to the client to decide how to interpret these preferences\n      and how to\\nbalance them against other considerations.\"\n    properties:\n      costPriority:\n        description: 'How much to prioritize cost when selecting a model. A value\n          of 0 means cost\n\n          is not important, while a value of 1 means cost is the most important\n\n          factor.'\n        maximum: 1\n        minimum: 0\n        type: number\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCostPriority\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n      hints:\n        description: 'Optional hints to use for model selection.\n\n\n          If multiple hints are specified, the client MUST evaluate them in order\n\n          (such that the first match is taken).\n\n\n          The client SHOULD prioritize these hints over the numeric priorities, but\n\n          MAY still use the priorities to select from ambiguous matches.'\n        items:\n          $ref: '#/definitions/ModelHint'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasHints\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#ModelHint\n        x-jsonld-container: '@list'\n      intelligencePriority:\n        description: 'How much to prioritize intelligence and capabilities when selecting\n          a\n\n          model. A value of 0 means intelligence is not important, while a value of\n          1\n\n          means intelligence is the most important factor.'\n        maximum: 1\n        minimum: 0\n        type: number\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasIntelligencePriority\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n      speedPriority:\n        description: 'How much to prioritize sampling speed (latency) when selecting\n          a model. A\n\n          value of 0 means speed is not important, while a value of 1 means speed\n          is\n\n          the most important factor.'\n        maximum: 1\n        minimum: 0\n        type: number\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasSpeedPriority\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n    type: object\n  Notification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    properties:\n      method:\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  NumberSchema:\n    properties:\n      description:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      maximum:\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMaximum\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      minimum:\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMinimum\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      title:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        enum:\n        - integer\n        - number\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - type\n    type: object\n  PaginatedRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    properties:\n      method:\n        type: string\n      params:\n        properties:\n          cursor:\n            description: 'An opaque token representing the current pagination position.\n\n              If provided, the server should return results starting after this cursor.'\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCursor\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  PaginatedResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      nextCursor:\n        description: 'An opaque token representing the pagination position after the\n          last returned result.\n\n          If present, there may be more results available.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasNextCursor\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Cursor\n    type: object\n  PingRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: A ping, issued by either the server or the client, to check that\n      the other party is still alive. The receiver must promptly respond, or else\n      may be disconnected.\n    properties:\n      method:\n        const: ping\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            properties:\n              progressToken:\n                $ref: '#/definitions/ProgressToken'\n                description: If specified, the caller is requesting out-of-band progress\n                  notifications for this request (as represented by notifications/progress).\n                  The value of this parameter is an opaque token that will be attached\n                  to any subsequent notifications. The receiver is not obligated to\n                  provide these notifications.\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgressToken\n                x-jsonld-type: http://modelcontextprotocol.io/ontology#ProgressToken\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  PrimitiveSchemaDefinition:\n    anyOf:\n    - $ref: '#/definitions/StringSchema'\n    - $ref: '#/definitions/NumberSchema'\n    - $ref: '#/definitions/BooleanSchema'\n    - $ref: '#/definitions/EnumSchema'\n    description: 'Restricted schema definitions that only allow primitive types\n\n      without nested objects or arrays.'\n  ProgressNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: An out-of-band notification used to inform the receiver of a progress\n      update for a long-running request.\n    properties:\n      method:\n        const: notifications/progress\n        type: string\n      params:\n        properties:\n          message:\n            description: An optional message describing the current progress.\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMessage\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n          progress:\n            description: The progress thus far. This should increase every time progress\n              is made, even if the total is unknown.\n            type: number\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgress\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n          progressToken:\n            $ref: '#/definitions/ProgressToken'\n            description: The progress token which was given in the initial request,\n              used to associate this notification with the request that is proceeding.\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgressToken\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#ProgressToken\n          total:\n            description: Total number of items to process (or total progress required),\n              if known.\n            type: number\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTotal\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n        required:\n        - progress\n        - progressToken\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  Prompt:\n    description: A prompt or prompt template that the server offers.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      arguments:\n        description: A list of arguments to use for templating the prompt.\n        items:\n          $ref: '#/definitions/PromptArgument'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasArguments\n        x-jsonld-type: '@json'\n      description:\n        description: An optional description of what this prompt provides\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    type: object\n  PromptArgument:\n    description: Describes an argument that a prompt can accept.\n    properties:\n      description:\n        description: A human-readable description of the argument.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      required:\n        description: Whether this argument must be provided.\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isRequired\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    type: object\n  PromptListChangedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: An optional notification from the server to the client, informing\n      it that the list of prompts it offers has changed. This may be issued by servers\n      without any previous subscription from the client.\n    properties:\n      method:\n        const: notifications/prompts/list_changed\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  PromptMessage:\n    description: 'Describes a message returned as part of a prompt.\n\n\n      This is similar to `SamplingMessage`, but also supports the embedding of\n\n      resources from the MCP server.'\n    properties:\n      content:\n        $ref: '#/definitions/ContentBlock'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContent\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n      role:\n        $ref: '#/definitions/Role'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRole\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Role\n    required:\n    - content\n    - role\n    type: object\n  PromptReference:\n    description: Identifies a prompt.\n    properties:\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: ref/prompt\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    - type\n    type: object\n  ReadResourceRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to the server, to read a specific resource URI.\n    properties:\n      method:\n        const: resources/read\n        type: string\n      params:\n        properties:\n          uri:\n            description: The URI of the resource to read. The URI can use any protocol;\n              it is up to the server how to interpret it.\n            format: uri\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n        required:\n        - uri\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  ReadResourceResult:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    description: The server's response to a resources/read request from the client.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      contents:\n        items:\n          anyOf:\n          - $ref: '#/definitions/TextResourceContents'\n          - $ref: '#/definitions/BlobResourceContents'\n        type: array\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContents\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n    required:\n    - contents\n    type: object\n  Request:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    properties:\n      method:\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            properties:\n              progressToken:\n                $ref: '#/definitions/ProgressToken'\n                description: If specified, the caller is requesting out-of-band progress\n                  notifications for this request (as represented by notifications/progress).\n                  The value of this parameter is an opaque token that will be attached\n                  to any subsequent notifications. The receiver is not obligated to\n                  provide these notifications.\n                x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgressToken\n                x-jsonld-type: http://modelcontextprotocol.io/ontology#ProgressToken\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  RequestId:\n    description: A uniquely identifying ID for a request in JSON-RPC.\n    type:\n    - string\n    - integer\n  Resource:\n    description: A known resource that the server is capable of reading.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      description:\n        description: 'A description of what this resource represents.\n\n\n          This can be used by clients to improve the LLM''s understanding of available\n          resources. It can be thought of like a \"hint\" to the model.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      mimeType:\n        description: The MIME type of this resource, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      size:\n        description: 'The size of the raw resource content, in bytes (i.e., before\n          base64 encoding or any tokenization), if known.\n\n\n          This can be used by Hosts to display file sizes and estimate context window\n          usage.'\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasSize\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI of this resource.\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - name\n    - uri\n    type: object\n  ResourceContents:\n    description: The contents of a specific resource or sub-resource.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      mimeType:\n        description: The MIME type of this resource, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI of this resource.\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - uri\n    type: object\n  ResourceLink:\n    description: 'A resource that the server is capable of reading, included in a\n      prompt or tool call result.\n\n\n      Note: resource links returned by tools are not guaranteed to appear in the results\n      of `resources/list` requests.'\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      description:\n        description: 'A description of what this resource represents.\n\n\n          This can be used by clients to improve the LLM''s understanding of available\n          resources. It can be thought of like a \"hint\" to the model.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      mimeType:\n        description: The MIME type of this resource, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      size:\n        description: 'The size of the raw resource content, in bytes (i.e., before\n          base64 encoding or any tokenization), if known.\n\n\n          This can be used by Hosts to display file sizes and estimate context window\n          usage.'\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasSize\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: resource_link\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI of this resource.\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - name\n    - type\n    - uri\n    type: object\n  ResourceListChangedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: An optional notification from the server to the client, informing\n      it that the list of resources it can read from has changed. This may be issued\n      by servers without any previous subscription from the client.\n    properties:\n      method:\n        const: notifications/resources/list_changed\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  ResourceTemplate:\n    description: A template description for resources available on the server.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      description:\n        description: 'A description of what this template is for.\n\n\n          This can be used by clients to improve the LLM''s understanding of available\n          resources. It can be thought of like a \"hint\" to the model.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      mimeType:\n        description: The MIME type for all resources that match this template. This\n          should only be included if all resources matching this template have the\n          same type.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uriTemplate:\n        description: A URI template (according to RFC 6570) that can be used to construct\n          resource URIs.\n        format: uri-template\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURITemplate\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - name\n    - uriTemplate\n    type: object\n  ResourceTemplateReference:\n    description: A reference to a resource or resource template definition.\n    properties:\n      type:\n        const: ref/resource\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI or URI template of the resource.\n        format: uri-template\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - type\n    - uri\n    type: object\n  ResourceUpdatedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: A notification from the server to the client, informing it that a\n      resource has changed and may need to be read again. This should only be sent\n      if the client previously sent a resources/subscribe request.\n    properties:\n      method:\n        const: notifications/resources/updated\n        type: string\n      params:\n        properties:\n          uri:\n            description: The URI of the resource that has been updated. This might\n              be a sub-resource of the one that the client actually subscribed to.\n            format: uri\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n        required:\n        - uri\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  Result:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Response\n    additionalProperties: {}\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n    type: object\n  Role:\n    description: The sender or recipient of messages and data in a conversation.\n    enum:\n    - assistant\n    - user\n    type: string\n  Root:\n    description: Represents a root directory or file that the server can operate on.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      name:\n        description: 'An optional name for the root. This can be used to provide a\n          human-readable\n\n          identifier for the root, which may be useful for display purposes or for\n\n          referencing the root in other parts of the application.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: 'The URI identifying the root. This *must* start with file://\n          for now.\n\n          This restriction may be relaxed in future versions of the protocol to allow\n\n          other URI schemes.'\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - uri\n    type: object\n  RootsListChangedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: 'A notification from the client to the server, informing it that\n      the list of roots has changed.\n\n      This notification should be sent whenever the client adds, removes, or modifies\n      any root.\n\n      The server should then request an updated list of roots using the ListRootsRequest.'\n    properties:\n      method:\n        const: notifications/roots/list_changed\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  SamplingMessage:\n    description: Describes a message issued to or received from an LLM API.\n    properties:\n      content:\n        anyOf:\n        - $ref: '#/definitions/TextContent'\n        - $ref: '#/definitions/ImageContent'\n        - $ref: '#/definitions/AudioContent'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContent\n        x-jsonld-type: '@id'\n        x-jsonld-container: '@list'\n      role:\n        $ref: '#/definitions/Role'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRole\n        x-jsonld-type: http://modelcontextprotocol.io/ontology#Role\n    required:\n    - content\n    - role\n    type: object\n  ServerCapabilities:\n    description: 'Capabilities that a server may support. Known capabilities are defined\n      here, in this schema, but this is not a closed set: any server can define its\n      own, additional capabilities.'\n    properties:\n      completions:\n        additionalProperties: true\n        description: Present if the server supports argument autocompletion suggestions.\n        properties: {}\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasCompletionsCapability\n        x-jsonld-type: '@json'\n      experimental:\n        additionalProperties:\n          additionalProperties: true\n          properties: {}\n          type: object\n        description: Experimental, non-standard capabilities that the server supports.\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasExperimentalCapabilities\n        x-jsonld-type: '@json'\n      logging:\n        additionalProperties: true\n        description: Present if the server supports sending log messages to the client.\n        properties: {}\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLoggingCapability\n        x-jsonld-type: '@json'\n      prompts:\n        description: Present if the server offers any prompt templates.\n        properties:\n          listChanged:\n            description: Whether this server supports notifications for changes to\n              the prompt list.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#supportsListChanged\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasPromptsCapability\n        x-jsonld-type: '@json'\n      resources:\n        description: Present if the server offers any resources to read.\n        properties:\n          listChanged:\n            description: Whether this server supports notifications for changes to\n              the resource list.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#supportsListChanged\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n          subscribe:\n            description: Whether this server supports subscribing to resource updates.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#supportsSubscription\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasResourcesCapability\n        x-jsonld-type: '@json'\n      tools:\n        description: Present if the server offers any tools to call.\n        properties:\n          listChanged:\n            description: Whether this server supports notifications for changes to\n              the tool list.\n            type: boolean\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#supportsListChanged\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasToolsCapability\n        x-jsonld-type: '@json'\n    type: object\n  ServerNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    anyOf:\n    - $ref: '#/definitions/CancelledNotification'\n    - $ref: '#/definitions/ProgressNotification'\n    - $ref: '#/definitions/ResourceListChangedNotification'\n    - $ref: '#/definitions/ResourceUpdatedNotification'\n    - $ref: '#/definitions/PromptListChangedNotification'\n    - $ref: '#/definitions/ToolListChangedNotification'\n    - $ref: '#/definitions/LoggingMessageNotification'\n  ServerRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    anyOf:\n    - $ref: '#/definitions/PingRequest'\n    - $ref: '#/definitions/CreateMessageRequest'\n    - $ref: '#/definitions/ListRootsRequest'\n    - $ref: '#/definitions/ElicitRequest'\n  ServerResult:\n    anyOf:\n    - $ref: '#/definitions/Result'\n    - $ref: '#/definitions/InitializeResult'\n    - $ref: '#/definitions/ListResourcesResult'\n    - $ref: '#/definitions/ListResourceTemplatesResult'\n    - $ref: '#/definitions/ReadResourceResult'\n    - $ref: '#/definitions/ListPromptsResult'\n    - $ref: '#/definitions/GetPromptResult'\n    - $ref: '#/definitions/ListToolsResult'\n    - $ref: '#/definitions/CallToolResult'\n    - $ref: '#/definitions/CompleteResult'\n  SetLevelRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: A request from the client to the server, to enable or adjust logging.\n    properties:\n      method:\n        const: logging/setLevel\n        type: string\n      params:\n        properties:\n          level:\n            $ref: '#/definitions/LoggingLevel'\n            description: The level of logging that the client wants to receive from\n              the server. The server should send all logs at this level and higher\n              (i.e., more severe) to the client as notifications/message.\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLevel\n            x-jsonld-type: http://modelcontextprotocol.io/ontology#LoggingLevel\n        required:\n        - level\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  StringSchema:\n    properties:\n      description:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      format:\n        enum:\n        - date\n        - date-time\n        - email\n        - uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasFormat\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      maxLength:\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMaxLength\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      minLength:\n        type: integer\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMinLength\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n      title:\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: string\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - type\n    type: object\n  SubscribeRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request resources/updated notifications from\n      the server whenever a particular resource changes.\n    properties:\n      method:\n        const: resources/subscribe\n        type: string\n      params:\n        properties:\n          uri:\n            description: The URI of the resource to subscribe to. The URI can use\n              any protocol; it is up to the server how to interpret it.\n            format: uri\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n        required:\n        - uri\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\n  TextContent:\n    description: Text provided to or from an LLM.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/Annotations'\n        description: Optional annotations for the client.\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      text:\n        description: The text content of the message.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasText\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      type:\n        const: text\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - text\n    - type\n    type: object\n  TextResourceContents:\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      mimeType:\n        description: The MIME type of this resource, if known.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMimeType\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      text:\n        description: The text of the item. This must only be set if the item can actually\n          be represented as text (not binary data).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasText\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      uri:\n        description: The URI of this resource.\n        format: uri\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n    required:\n    - text\n    - uri\n    type: object\n  Tool:\n    description: Definition for a tool the client can call.\n    properties:\n      _meta:\n        additionalProperties: {}\n        description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n          for notes on `_meta` usage.'\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n        x-jsonld-type: '@json'\n      annotations:\n        $ref: '#/definitions/ToolAnnotations'\n        description: 'Optional additional tool information.\n\n\n          Display name precedence order is: title, annotations.title, then name.'\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasAnnotations\n        x-jsonld-type: '@id'\n      description:\n        description: 'A human-readable description of the tool.\n\n\n          This can be used by clients to improve the LLM''s understanding of available\n          tools. It can be thought of like a \"hint\" to the model.'\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasDescription\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      inputSchema:\n        description: A JSON Schema object defining the expected parameters for the\n          tool.\n        properties:\n          properties:\n            additionalProperties:\n              additionalProperties: true\n              properties: {}\n              type: object\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProperties\n            x-jsonld-type: '@json'\n          required:\n            items:\n              type: string\n            type: array\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#isRequired\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n          type:\n            const: object\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - type\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasInputSchema\n        x-jsonld-type: '@json'\n      name:\n        description: Intended for programmatic or logical use, but used as a display\n          name in past specs or fallback (if title isn't present).\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasName\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n      outputSchema:\n        description: 'An optional JSON Schema object defining the structure of the\n          tool''s output returned in\n\n          the structuredContent field of a CallToolResult.'\n        properties:\n          properties:\n            additionalProperties:\n              additionalProperties: true\n              properties: {}\n              type: object\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProperties\n            x-jsonld-type: '@json'\n          required:\n            items:\n              type: string\n            type: array\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#isRequired\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n          type:\n            const: object\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasContentType\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n        required:\n        - type\n        type: object\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasOutputSchema\n        x-jsonld-type: '@json'\n      title:\n        description: \"Intended for UI and end-user contexts \\u2014 optimized to be\n          human-readable and easily understood,\\neven by those unfamiliar with domain-specific\n          terminology.\\n\\nIf not provided, the name should be used for display (except\n          for Tool,\\nwhere `annotations.title` should be given precedence over using\n          `name`,\\nif present).\"\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    required:\n    - inputSchema\n    - name\n    type: object\n  ToolAnnotations:\n    description: 'Additional properties describing a Tool to clients.\n\n\n      NOTE: all properties in ToolAnnotations are **hints**.\n\n      They are not guaranteed to provide a faithful description of\n\n      tool behavior (including descriptive properties like `title`).\n\n\n      Clients should never make tool use decisions based on ToolAnnotations\n\n      received from untrusted servers.'\n    properties:\n      destructiveHint:\n        description: 'If true, the tool may perform destructive updates to its environment.\n\n          If false, the tool performs only additive updates.\n\n\n          (This property is meaningful only when `readOnlyHint == false`)\n\n\n          Default: true'\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isDestructiveHint\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      idempotentHint:\n        description: 'If true, calling the tool repeatedly with the same arguments\n\n          will have no additional effect on the its environment.\n\n\n          (This property is meaningful only when `readOnlyHint == false`)\n\n\n          Default: false'\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isIdempotentHint\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      openWorldHint:\n        description: 'If true, this tool may interact with an \"open world\" of external\n\n          entities. If false, the tool''s domain of interaction is closed.\n\n          For example, the world of a web search tool is open, whereas that\n\n          of a memory tool is not.\n\n\n          Default: true'\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isOpenWorldHint\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      readOnlyHint:\n        description: 'If true, the tool does not modify its environment.\n\n\n          Default: false'\n        type: boolean\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#isReadOnlyHint\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#boolean\n      title:\n        description: A human-readable title for the tool.\n        type: string\n        x-jsonld-id: http://modelcontextprotocol.io/ontology#hasTitle\n        x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n    type: object\n  ToolListChangedNotification:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Notification\n    description: An optional notification from the server to the client, informing\n      it that the list of tools it offers has changed. This may be issued by servers\n      without any previous subscription from the client.\n    properties:\n      method:\n        const: notifications/tools/list_changed\n        type: string\n      params:\n        additionalProperties: {}\n        properties:\n          _meta:\n            additionalProperties: {}\n            description: 'See [General fields: `_meta`](/specification/2025-06-18/basic/index#meta)\n              for notes on `_meta` usage.'\n            type: object\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMetadata\n            x-jsonld-type: '@json'\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    type: object\n  UnsubscribeRequest:\n    allOf:\n    - $ref: https://ogcincubator.github.io/modelcontextprotocol/build/annotated/json-rpc/schema.yaml#Request\n    description: Sent from the client to request cancellation of resources/updated\n      notifications from the server. This should follow a previous resources/subscribe\n      request.\n    properties:\n      method:\n        const: resources/unsubscribe\n        type: string\n      params:\n        properties:\n          uri:\n            description: The URI of the resource to unsubscribe from.\n            format: uri\n            type: string\n            x-jsonld-id: http://modelcontextprotocol.io/ontology#hasURI\n            x-jsonld-type: http://www.w3.org/2001/XMLSchema#anyURI\n        required:\n        - uri\n        type: object\n        x-jsonld-id: jrpc:hasParameters\n        x-jsonld-type: urn:mcp:params\n    required:\n    - method\n    - params\n    type: object\nanyOf:\n- $ref: '#/definitions/ClientRequest'\n- $ref: '#/definitions/ClientResult'\n- $ref: '#/definitions/ServerRequest'\n- $ref: '#/definitions/ServerResult'\nx-jsonld-extra-terms:\n  RequestId: http://modelcontextprotocol.io/ontology#RequestId\n  Cursor:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Cursor\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n  ProgressToken: http://modelcontextprotocol.io/ontology#ProgressToken\n  Implementation:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Implementation\n    x-jsonld-type: '@id'\n  InitializeRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#InitializeRequest\n    x-jsonld-type: '@id'\n  InitializeResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#InitializeResult\n    x-jsonld-type: '@id'\n  InitializedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#InitializedNotification\n    x-jsonld-type: '@id'\n  ClientCapabilities:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ClientCapabilities\n    x-jsonld-type: '@id'\n  ServerCapabilities:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ServerCapabilities\n    x-jsonld-type: '@id'\n  rootsX-duplicate-tofix:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRootsCapability\n    x-jsonld-type: '@json'\n  Resource:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Resource\n    x-jsonld-type: '@id'\n  ResourceTemplate:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceTemplate\n    x-jsonld-type: '@id'\n  ResourceContents:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceContents\n    x-jsonld-type: '@id'\n  TextResourceContents:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#TextResourceContents\n    x-jsonld-type: '@id'\n  BlobResourceContents:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#BlobResourceContents\n    x-jsonld-type: '@id'\n  ResourceLink:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceLink\n    x-jsonld-type: '@id'\n  EmbeddedResource:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#EmbeddedResource\n    x-jsonld-type: '@id'\n  ListResourcesRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListResourcesRequest\n    x-jsonld-type: '@id'\n  ListResourcesResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListResourcesResult\n    x-jsonld-type: '@id'\n  ListResourceTemplatesRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListResourceTemplatesRequest\n    x-jsonld-type: '@id'\n  ListResourceTemplatesResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListResourceTemplatesResult\n    x-jsonld-type: '@id'\n  ReadResourceRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ReadResourceRequest\n    x-jsonld-type: '@id'\n  ReadResourceResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ReadResourceResult\n    x-jsonld-type: '@id'\n  SubscribeRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#SubscribeRequest\n    x-jsonld-type: '@id'\n  UnsubscribeRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#UnsubscribeRequest\n    x-jsonld-type: '@id'\n  ResourceUpdatedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceUpdatedNotification\n    x-jsonld-type: '@id'\n  ResourceListChangedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceListChangedNotification\n    x-jsonld-type: '@id'\n  Tool:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Tool\n    x-jsonld-type: '@id'\n  ToolResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CallToolResult\n    x-jsonld-type: '@id'\n  ToolAnnotations:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ToolAnnotations\n    x-jsonld-type: '@id'\n  ListToolsRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListToolsRequest\n    x-jsonld-type: '@id'\n  ListToolsResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListToolsResult\n    x-jsonld-type: '@id'\n  CallToolRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CallToolRequest\n    x-jsonld-type: '@id'\n  CallToolResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CallToolResult\n    x-jsonld-type: '@id'\n  ToolListChangedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ToolListChangedNotification\n    x-jsonld-type: '@id'\n  Prompt:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Prompt\n    x-jsonld-type: '@id'\n  PromptArgument:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PromptArgument\n    x-jsonld-type: '@id'\n  PromptMessage:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PromptMessage\n    x-jsonld-type: '@id'\n  PromptReference:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PromptReference\n    x-jsonld-type: '@id'\n  ListPromptsRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListPromptsRequest\n    x-jsonld-type: '@id'\n  ListPromptsResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListPromptsResult\n    x-jsonld-type: '@id'\n  GetPromptRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#GetPromptRequest\n    x-jsonld-type: '@id'\n  GetPromptResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#GetPromptResult\n    x-jsonld-type: '@id'\n  PromptListChangedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PromptListChangedNotification\n    x-jsonld-type: '@id'\n  ContentBlock:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ContentBlock\n    x-jsonld-type: '@id'\n  TextContent:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#TextContent\n    x-jsonld-type: '@id'\n  ImageContent:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ImageContent\n    x-jsonld-type: '@id'\n  AudioContent:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#AudioContent\n    x-jsonld-type: '@id'\n  Role:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Role\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n  SamplingMessage:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#SamplingMessage\n    x-jsonld-type: '@id'\n  Annotations:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Annotations\n    x-jsonld-type: '@id'\n  CreateMessageRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CreateMessageRequest\n    x-jsonld-type: '@id'\n  CreateMessageResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CreateMessageResult\n    x-jsonld-type: '@id'\n  ModelPreferences:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ModelPreferences\n    x-jsonld-type: '@id'\n  ModelHint:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ModelHint\n    x-jsonld-type: '@id'\n  Root:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Root\n    x-jsonld-type: '@id'\n  ListRootsRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListRootsRequest\n    x-jsonld-type: '@id'\n  ListRootsResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ListRootsResult\n    x-jsonld-type: '@id'\n  RootsListChangedNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#RootsListChangedNotification\n    x-jsonld-type: '@id'\n  ElicitRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ElicitRequest\n    x-jsonld-type: '@id'\n  ElicitResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ElicitResult\n    x-jsonld-type: '@id'\n  CompleteRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CompleteRequest\n    x-jsonld-type: '@id'\n  CompleteResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CompleteResult\n    x-jsonld-type: '@id'\n  ResourceTemplateReference:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ResourceTemplateReference\n    x-jsonld-type: '@id'\n  LoggingLevel:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#LoggingLevel\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n  SetLevelRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#SetLevelRequest\n    x-jsonld-type: '@id'\n  LoggingMessageNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#LoggingMessageNotification\n    x-jsonld-type: '@id'\n  logger:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasLogger\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n  ProgressNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#ProgressNotification\n    x-jsonld-type: '@id'\n  CancelledNotification:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#CancelledNotification\n    x-jsonld-type: '@id'\n  progress:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasProgress\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#decimal\n  requestId:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasRequestId\n    x-jsonld-type: http://modelcontextprotocol.io/ontology#RequestId\n  reason:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasReason\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#string\n  PingRequest:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PingRequest\n    x-jsonld-type: '@id'\n  Result:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#Result\n    x-jsonld-type: '@id'\n  EmptyResult:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#EmptyResult\n    x-jsonld-type: '@id'\n  StringSchema:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#StringSchema\n    x-jsonld-type: '@id'\n  NumberSchema:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#NumberSchema\n    x-jsonld-type: '@id'\n  BooleanSchema:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#BooleanSchema\n    x-jsonld-type: '@id'\n  EnumSchema:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#EnumSchema\n    x-jsonld-type: '@id'\n  PrimitiveSchemaDefinition:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#PrimitiveSchemaDefinition\n    x-jsonld-type: '@id'\n  minimum:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMinimum\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\n  maximum:\n    x-jsonld-id: http://modelcontextprotocol.io/ontology#hasMaximum\n    x-jsonld-type: http://www.w3.org/2001/XMLSchema#integer\nx-jsonld-prefixes:\n  mcp: http://modelcontextprotocol.io/ontology#\n  xsd: http://www.w3.org/2001/XMLSchema#\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n",
  "gitRepository": "https://github.com/ogcincubator/modelcontextprotocol",
  "gitPath": "_sources/mcp"
}